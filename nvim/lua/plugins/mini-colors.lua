return {
	'echasnovski/mini.colors',
	-- lazy = false,
	config = function()
		local MiniColors = require("mini.colors")

		local p = {
			Error = "#ff0000",
			Warning = "#ffaf00",
			Gray100 = "#e4e4e4",
			Gray300 = "#d0d0d0",
			Gray400 = "#bcbcbc",
			Gray500 = "#a8a8a8",
			Gray600 = "#949494",
			Gray700 = "#808080",
			Gray800 = "#6c6c6c",
			Black = "#000000",
		}

		local s = {
			ErrorFg = { fg = p.Error },
			ErrorUnderline = { sp = p.Error, underline = true },
			WarningFg = { fg = p.Warning },
			WarningUnderline = { sp = p.Warning, underline = true },
			BlackFg = { fg = p.Black },
			BlackBg = { bg = p.Black },
			Gray100Fg = { fg = p.Gray100 },
			Gray100Bg = { bg = p.Gray100 },
			Gray300Fg = { fg = p.Gray300 },
			Gray300Bg = { bg = p.Gray300 },
			Gray400Fg = { fg = p.Gray400 },
			Gray400Bg = { bg = p.Gray400 },
			Gray500Fg = { fg = p.Gray500 },
			Gray500Bg = { bg = p.Gray500 },
			Gray600Fg = { fg = p.Gray600 },
			Gray600Bg = { bg = p.Gray600 },
			Gray700Fg = { fg = p.Gray700 },
			Gray700Bg = { bg = p.Gray700 },
			Gray800Fg = { fg = p.Gray800 },
			Gray800Bg = { bg = p.Gray800 },
		}

		local theme = MiniColors.as_colorscheme({
			name = 'Brutonochrome',
			groups = {
				ColorColumn = { bg = p.Gray100 },
				Conceal = { fg = p.Gray600 },
				CurSearch = { fg = p.Gray100, bg = p.Black },
				Cursor = { fg = p.Gray100, bg = p.Black },
				CursorColumn = { bg = p.Gray100 },
				CursorIM = { fg = p.Gray100, bg = p.Black },
				CursorLine = { bg = p.Gray100 },
				CursorLineFold = { fg = p.Gray700, bg = p.Gray100 },
				CursorLineNr = { fg = p.Gray700, bg = p.Gray100 },
				CursorLineSign = { fg = p.Gray700, bg = p.Gray100 },
				Directory = { fg = p.Black },
				EndOfBuffer = { fg = p.Gray700 },
				ErrorMsg = s.ErrorUnderline,
				FoldColumn = { fg = p.Gray700, bg = p.Gray100 },
				Folded = { fg = p.Gray700, bg = p.Gray100 },
				IncSearch = { fg = p.Gray100, bg = p.Black },
				lCursor = { fg = p.Gray100, bg = p.Black },
				LineNr = { fg = p.Gray700, bg = p.Gray100 },
				LineNrAbove = { fg = p.Gray700, bg = p.Gray100 },
				LineNrBelow = { fg = p.Gray700, bg = p.Gray100 },
				MatchParen = { bg = p.Gray100 },
				ModeMsg = { fg = p.Gray700 },
				MoreMsg = { fg = p.Gray700 },
				MsgArea = { fg = p.Black, bg = p.Gray100 },
				MsgSeparator = { fg = p.Gray700, bg = p.Gray100 },
				NonText = { fg = p.Gray700 },
				Normal = { fg = p.Black, bg = p.Gray100 },
				NormalFloat = { fg = p.Black, bg = p.Gray100 },
				NormalNC = { fg = p.Black, bg = p.Gray100 },
				Pmenu = { fg = p.Black, bg = p.Gray100 },
				PmenuExtra = { fg = p.Black, bg = p.Gray100 },
				PmenuExtraSel = { fg = p.Black, bg = p.Gray100, reverse = true },
				PmenuKind = { fg = p.Black, bg = p.Gray100 },
				PmenuKindSel = { fg = p.Black, bg = p.Gray100, reverse = true },
				PmenuMatch = { fg = p.Black, bg = p.Gray100, bold = true },
				PmenuMatchSel = { fg = p.Black, bg = p.Gray100, bold = true, reverse = true },
				PmenuSbar = { bg = p.Gray100 },
				PmenuSel = { fg = p.Black, bg = p.Gray100, reverse = true },
				PmenuThumb = { bg = p.Gray100 },
				Question = { fg = p.Gray600 },
				QuickFixLine = { bg = p.Gray100 },
				Search = { fg = p.Gray100, bg = p.Black },
				SignColumn = { fg = p.Gray700, bg = p.Gray100 },
				SpecialKey = { fg = p.Gray700 },
				SpellBad = s.ErrorUnderline,
				SpellCap = { sp = p.Gray600, undercurl = true },
				SpellLocal = { sp = p.Gray600, undercurl = true },
				SpellRare = { sp = p.Gray700, undercurl = true },
				StatusLine = { fg = p.Gray700, bg = p.Gray100 },
				StatusLineNC = { fg = p.Gray700, bg = p.Gray100 },
				Substitute = { fg = p.Gray100, bg = p.Black },
				Title = { fg = p.Gray600 },
				VertSplit = { fg = p.Gray100, bg = p.Gray100 },
				Visual = s.Gray300Bg,
				WarningMsg = s.WarningUnderline,
				Whitespace = { fg = p.Gray700 },
				WildMenu = { fg = p.Black, bg = p.Black },
				WinBar = { fg = p.Gray700, bg = p.Gray100 },
				WinBarNC = { fg = p.Gray700, bg = p.Gray100 },
				WinSeparator = { fg = p.Gray100, bg = p.Gray100 },
				Boolean = { fg = p.Black },
				Character = { fg = p.Black },
				Comment = s.Gray500Fg,
				Conditional = s.Gray700Fg,
				Constant = s.Gray700Fg,
				Debug = { fg = p.Black },
				Define = { fg = p.Gray700 },
				Delimiter = { fg = p.Gray400 },
				Error = s.ErrorUnderline,
				Exception = s.ErrorUnderline,
				Float = { fg = p.Black },
				Function = { fg = p.Gray800 },
				Identifier = { fg = p.Black },
				Ignore = { fg = p.Gray700 },
				Include = { fg = p.Gray600 },
				Keyword = { fg = p.Gray600 },
				Label = { fg = p.Black },
				Macro = { fg = p.Black },
				Number = { fg = p.Gray700 },
				Operator = { fg = p.Gray700 },
				PreCondit = { fg = p.Black },
				PreProc = { fg = p.Black },
				Repeat = { fg = p.Black },
				Special = { fg = p.Gray700 },
				SpecialChar = { fg = p.Gray700 },
				SpecialComment = { fg = p.Gray700 },
				Statement = { fg = p.Black },
				StorageClass = { fg = p.Black },
				String = { fg = p.Gray700 },
				Structure = { fg = p.Gray700 },
				Tag = { fg = p.Black },
				Todo = { fg = p.Black, bg = p.Gray100 },
				Type = { fg = p.Black },
				Typedef = { fg = p.Black },
				Bold = { bold = true },
				Italic = { italic = true },
				TooLong = { fg = p.Black },
				Underlined = { underline = true },
				Added = { fg = p.Gray700 },
				Changed = { fg = p.Gray700 },
				Removed = { fg = p.Black },
				DiagnosticError = s.ErrorUnderline,
				DiagnosticHint = s.WarningUnderline,
				DiagnosticInfo = s.WarningUnderline,
				DiagnosticOk = s.WarningUnderline,
				DiagnosticWarn = s.WarningUnderline,
				DiagnosticFloatingError = s.ErrorUnderline,
				DiagnosticFloatingHint = s.WarningUnderline,
				DiagnosticFloatingInfo = s.WarningUnderline,
				DiagnosticFloatingOk = s.WarningUnderline,
				DiagnosticFloatingWarn = s.WarningUnderline,
				DiagnosticSignError = s.ErrorFg,
				DiagnosticSignHint = s.WarningFg,
				DiagnosticSignInfo = s.WarningFg,
				DiagnosticSignOk = s.WarningFg,
				DiagnosticSignWarn = s.WarningFg,
				DiagnosticUnderlineError = s.ErrorUnderline,
				DiagnosticUnderlineHint = s.WarningUnderline,
				DiagnosticUnderlineInfo = s.WarningUnderline,
				DiagnosticUnderlineOk = s.WarningUnderline,
				DiagnosticUnderlineWarn = s.WarningUnderline,
				LspReferenceText = { bg = p.Gray100 },
				LspReferenceRead = { link = "LspReferenceText" },
				LspReferenceWrite = { link = "LspReferenceText" },
				LspSignatureActiveParameter = { link = "LspReferenceText" },
				LspCodeLens = { link = "Comment" },
				LspCodeLensSeparator = { link = "Comment" },
				SnippetTabstop = { link = "Visual" },
				IblIndent = s.Gray500Fg,
				MasonError = s.ErrorUnderline,
				MasonHeader = { fg = p.Gray100, bg = p.Gray600, bold = true },
				MasonHeaderSecondary = { fg = p.Gray100, bg = p.Gray700, bold = true },
				MasonHeading = { link = 'Bold' },
				MasonHighlight = { fg = p.Gray700 },
				MasonHighlightBlock = { fg = p.Gray100, bg = p.Gray700 },
				MasonHighlightBlockBold = { link = 'MasonHeaderSecondary' },
				MasonHighlightBlockBoldSecondary = { link = 'MasonHeader' },
				MasonHighlightBlockSecondary = { fg = p.Gray100, bg = p.Gray600 },
				MasonHighlightSecondary = { fg = p.Gray600 },
				MasonLink = { link = 'MasonHighlight' },
				MasonMuted = { link = 'Comment' },
				MasonMutedBlock = { fg = p.Gray100, bg = p.Gray700 },
				MasonMutedBlockBold = { fg = p.Gray100, bg = p.Gray700, bold = true },
				TroubleCount = { fg = p.Gray700, bold = true },
				TroubleIndent = { fg = p.Gray100 },
				TroubleLocation = { fg = p.Gray700 },
				TroubleSignError = s.ErrorUnderline,
				TroubleSignHint = s.WarningUnderline,
				TroubleSignInformation = s.WarningUnderline,
				TroubleSignOther = s.WarningUnderline,
				TroubleSignWarning = s.WarningUnderline,
				TroubleText = { fg = p.Black },
				TroubleTextError = s.ErrorUnderline,
				TroubleTextHint = s.WarningUnderline,
				TroubleTextInformation = s.WarningUnderline,
				TroubleTextWarning = s.WarningUnderline,
				LazyButton = { bg = p.Gray100 },
				LazyButtonActive = { bg = p.Gray100 },
				LazyDimmed = { link = 'Comment' },
				LazyH1 = { bg = p.Gray100, bold = true },
				MiniCursorword = { underline = true },
				MiniCursorwordCurrent = { underline = true },
				MiniHipatternsFixme = { fg = p.Gray100, bg = p.Black, bold = true },
				MiniHipatternsHack = { fg = p.Gray100, bg = p.Gray700, bold = true },
				MiniHipatternsNote = { fg = p.Gray100, bg = p.Gray600, bold = true },
				MiniHipatternsTodo = { fg = p.Gray100, bg = p.Gray700, bold = true },
				MiniOperatorsExchangeFrom = { link = "IncSearch" },
				MiniSurround = { link = "IncSearch" },
				["@keyword.return"] = { fg = p.Black },
				["@symbol"] = { fg = p.Gray700 },
				["@variable"] = { fg = p.Black },
				["@text.strong"] = { bold = true },
				["@text.emphasis"] = { italic = true },
				["@text.strike"] = { strikethrough = true },
				["@text.underline"] = { link = "Underlined" },
				["@markup.strong"] = { link = "@text.strong" },
				["@markup.italic"] = { link = "@text.emphasis" },
				["@markup.strikethrough"] = { link = "@text.strike" },
				["@markup.underline"] = { link = "@text.underline" },
				["@string.special.vimdoc"] = { link = "SpecialChar" },
				["@variable.parameter.vimdoc"] = { fg = p.Black },
			}
		})

		theme.apply(theme)
	end
}
